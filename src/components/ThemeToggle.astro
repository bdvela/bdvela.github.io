---
import { Icon } from 'astro-icon/components';
const THEMES = ["light", "dark"];
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition mx-2"
  >
    <span class="sr-only">Elige el tema</span>
    <Icon id="light" name="mdi:white-balance-sunny" class="theme-toggle-icon size-5 transition-all" style="display: none;" />
    <Icon id="dark" name="mdi:moon-waning-crescent" class="theme-toggle-icon size-5 transition-all" />
  </button>
</div>

<style>
  .theme-toggle-icon {
    display: none;
  }
  .theme-toggle-icon#dark {
    display: inline;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    updateTheme();
    document.getElementById('theme-toggle-btn').addEventListener('click', (e) => {
      e.preventDefault();
      toggleTheme();
    });
  });

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "dark";
    }
    return "dark";
  };

  const updateTheme = () => {
    const themePreference = getThemePreference();
    document.documentElement.classList.toggle('dark', themePreference === "dark");
    updateIcon(themePreference);
  };

  const updateIcon = (themePreference) => {
    const lightIcon = document.querySelector("#light");
    const darkIcon = document.querySelector("#dark");
    if (lightIcon && darkIcon) {
      lightIcon.style.display = themePreference === "light" ? "inline" : "none";
      darkIcon.style.display = themePreference === "dark" ? "inline" : "none";
    }
  };

  const toggleTheme = () => {
    const currentTheme = getThemePreference();
    const newTheme = currentTheme === "light" ? "dark" : "light";
    localStorage.setItem("theme", newTheme);
    updateTheme();
  };
</script>
